# ======== COMPILER ========

FC      = gfortran
#FC      = nagfor
#FC      = g95

ifeq ($(FC),nagfor)
  OPTNAGFOR = -w=x95 -DNAGFOR
endif
ifeq ($(FC),gfortran)
  OPTGFORTRAN = -m64 
endif

OPT = $(OPTNAGFOR) $(OPTGFORTRAN) -O3 #-g3 -ggdb


# ======== LINKS ========

UNAME := $(shell uname)
ifeq ($(UNAME), Linux)
  PROGDIR = /home/jdm57/src
endif
ifeq ($(UNAME), Darwin)
  PROGDIR = /Users/mcewen/src
endif

SSHTDIR  = $(PROGDIR)/ssht
SSHTLIB  = $(SSHTDIR)/lib/f90
SSHTLIBNM= ssht
SSHTINC  = $(SSHTDIR)/include/f90
SSHTSRC  = $(SSHTDIR)/src/f90
SSHTMOD  = $(SSHTDIR)/src/f90/mod
SSHTPROG = $(SSHTDIR)/src/f90/prog
SSHTBIN  = $(SSHTDIR)/bin/f90
SSHTOBJ  = $(SSHTINC)
SSHTDOC  = $(SSHTDIR)/doc/f90

FFTWLIB      = $(PROGDIR)/fftw/lib
FFTWLIBNM    = fftw3


# ======== SOURCE LOCATIONS ========

vpath %.f90 $(SSHTMOD)
vpath %.f90 $(SSHTPROG)


# ======== FFFLAGS ========

ifeq ($(FC),nagfor)
  FFLAGSNAGFOR = -mdir $(SSHTINC)
endif
ifeq ($(FC),gfortran)
  FFLAGSGFORTRAN = -J$(SSHTINC)
endif

FFLAGS  = -I$(SSHTINC) $(FFLAGSNAGFOR) $(FFLAGSGFORTRAN)


# ======== LDFLAGS ========

LDFLAGS = -L$(SSHTLIB) -l$(SSHTLIBNM) \
          -L$(FFTWLIB) -l$(FFTWLIBNM)


# ======== PPFLAGS ========

ifeq ($(FC),nagfor)
  PPFLAGS = -fpp $(OPT)
else ifeq ($(FC),g95)
  PPFLAGS = -cpp $(OPT)
else ifeq ($(FC),gfortran)
  PPFLAGS = -x f95-cpp-input $(OPT)
endif


# ======== OBJECT FILES TO MAKE ========

SSHTOBJS = $(SSHTOBJ)/ssht_types_mod.o    \
           $(SSHTOBJ)/ssht_error_mod.o    \
           $(SSHTOBJ)/ssht_dl_mod.o       \
           $(SSHTOBJ)/ssht_sampling_mod.o \
           $(SSHTOBJ)/ssht_core_mod.o   


# ======== MAKE RULES ========

$(SSHTOBJ)/%.o: %.f90
	$(FC) $(FFLAGS) $(FFLAGSPROG) $(PPFLAGS) -c $< -o $@ 

.PHONY: default
default: lib

.PHONY: all
all:     lib prog test

.PHONY: test
test:    $(SSHTBIN)/ssht_test

.PHONY: runtest
runtest: test
	$(SSHTBIN)/ssht_test 64 0

.PHONY: prog
prog:    $(SSHTBIN)/ssht_forward $(SSHTBIN)/ssht_inverse


# Library

.PHONY: lib
lib:	 $(SSHTLIB)/lib$(SSHTLIBNM).a
$(SSHTLIB)/lib$(SSHTLIBNM).a: $(SSHTOBJS)
	ar -r $(SSHTLIB)/lib$(SSHTLIBNM).a $(SSHTOBJS)


# Documentation

.PHONY: doc
doc:
	doxygen $(SSHTSRC)/doxygen.config
.PHONY: cleandoc
cleandoc:
	rm -f $(SSHTDOC)/html/*


# Cleaning up

.PHONY: clean
clean:	tidy
	rm -f $(SSHTOBJ)/*.mod
	rm -f $(SSHTOBJ)/*.o
	rm -f $(SSHTLIB)/lib$(SSHTLIBNM).a
	rm -f $(SSHTBIN)/*

.PHONY: tidy
tidy:
	rm -f $(SSHTMOD)/*~ 
	rm -f $(SSHTPROG)/*~ 

.PHONY: cleanall
cleanall: clean cleandoc

# Module dependencies

$(SSHTOBJ)/ssht_types_mod.o: $(SSHTMOD)/ssht_types_mod.f90
$(SSHTOBJ)/ssht_error_mod.o: $(SSHTMOD)/ssht_error_mod.f90          \
                           $(SSHTOBJ)/ssht_types_mod.o
$(SSHTOBJ)/ssht_dl_mod.o:    $(SSHTMOD)/ssht_dl_mod.f90             \
                           $(SSHTOBJ)/ssht_types_mod.o
$(SSHTOBJ)/ssht_sampling_mod.o:  $(SSHTMOD)/ssht_sampling_mod.f90   \
                           $(SSHTOBJ)/ssht_types_mod.o              \
                           $(SSHTOBJ)/ssht_error_mod.o
$(SSHTOBJ)/ssht_core_mod.o:  $(SSHTMOD)/ssht_core_mod.f90           \
                           $(SSHTOBJ)/ssht_types_mod.o              \
                           $(SSHTOBJ)/ssht_error_mod.o              \
                           $(SSHTOBJ)/ssht_sampling_mod.o           \
                           $(SSHTOBJ)/ssht_dl_mod.o       


# Program dependencies and compilation

$(SSHTOBJ)/ssht_test.o:     $(SSHTPROG)/ssht_test.f90 $(SSHTLIB)/lib$(SSHTLIBNM).a
$(SSHTBIN)/ssht_test:       $(SSHTOBJ)/ssht_test.o
	$(FC)                                          \
	-o $(SSHTBIN)/ssht_test                        \
	$(SSHTOBJ)/ssht_test.o                         \
	$(LDFLAGS) $(PPFLAGS)

$(SSHTOBJ)/ssht_forward.o:     $(SSHTPROG)/ssht_forward.f90 $(SSHTLIB)/lib$(SSHTLIBNM).a
$(SSHTBIN)/ssht_forward:       $(SSHTOBJ)/ssht_forward.o
	$(FC)                                          \
	-o $(SSHTBIN)/ssht_forward                     \
	$(SSHTOBJ)/ssht_forward.o                      \
	$(LDFLAGS) $(PPFLAGS)

$(SSHTOBJ)/ssht_inverse.o:     $(SSHTPROG)/ssht_inverse.f90 $(SSHTLIB)/lib$(SSHTLIBNM).a
$(SSHTBIN)/ssht_inverse:       $(SSHTOBJ)/ssht_inverse.o
	$(FC)                                          \
	-o $(SSHTBIN)/ssht_inverse                     \
	$(SSHTOBJ)/ssht_inverse.o                      \
	$(LDFLAGS) $(PPFLAGS)


